// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `parameter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package org.zigui.ice.example;

/**
 * Provides type-specific helper functions.
 **/
public final class IParameterPrxHelper extends Ice.ObjectPrxHelperBase implements IParameterPrx
{
    private static final String __reg_name = "reg";

    public boolean reg(String name, int age)
    {
        return reg(name, age, null, false);
    }

    public boolean reg(String name, int age, java.util.Map<String, String> __ctx)
    {
        return reg(name, age, __ctx, true);
    }

    private boolean reg(String name, int age, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__reg_name);
        return end_reg(begin_reg(name, age, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_reg(String name, int age)
    {
        return begin_reg(name, age, null, false, false, null);
    }

    public Ice.AsyncResult begin_reg(String name, int age, java.util.Map<String, String> __ctx)
    {
        return begin_reg(name, age, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_reg(String name, int age, Ice.Callback __cb)
    {
        return begin_reg(name, age, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_reg(String name, int age, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_reg(name, age, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_reg(String name, int age, Callback_IParameter_reg __cb)
    {
        return begin_reg(name, age, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_reg(String name, int age, java.util.Map<String, String> __ctx, Callback_IParameter_reg __cb)
    {
        return begin_reg(name, age, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_reg(String name, 
                                     int age, 
                                     IceInternal.Functional_BoolCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_reg(name, age, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_reg(String name, 
                                     int age, 
                                     IceInternal.Functional_BoolCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_reg(name, age, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_reg(String name, 
                                     int age, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_BoolCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_reg(name, age, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_reg(String name, 
                                     int age, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_BoolCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_reg(name, age, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_reg(String name, 
                                      int age, 
                                      java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.Functional_BoolCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_reg(name, age, __ctx, __explicitCtx, __synchronous, 
                         new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                             {
                                 public final void __completed(Ice.AsyncResult __result)
                                 {
                                     IParameterPrxHelper.__reg_completed(this, __result);
                                 }
                             });
    }

    private Ice.AsyncResult begin_reg(String name, 
                                      int age, 
                                      java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__reg_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__reg_name, __cb);
        try
        {
            __result.prepare(__reg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeInt(age);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_reg(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __reg_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __reg_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        org.zigui.ice.example.IParameterPrx __proxy = (org.zigui.ice.example.IParameterPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_reg(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __unReg_name = "unReg";

    public void unReg(String name, Ice.IntHolder count, Ice.BooleanHolder successful)
    {
        unReg(name, count, successful, null, false);
    }

    public void unReg(String name, Ice.IntHolder count, Ice.BooleanHolder successful, java.util.Map<String, String> __ctx)
    {
        unReg(name, count, successful, __ctx, true);
    }

    private void unReg(String name, Ice.IntHolder count, Ice.BooleanHolder successful, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__unReg_name);
        end_unReg(count, successful, begin_unReg(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_unReg(String name)
    {
        return begin_unReg(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_unReg(String name, java.util.Map<String, String> __ctx)
    {
        return begin_unReg(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_unReg(String name, Ice.Callback __cb)
    {
        return begin_unReg(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_unReg(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unReg(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_unReg(String name, Callback_IParameter_unReg __cb)
    {
        return begin_unReg(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_unReg(String name, java.util.Map<String, String> __ctx, Callback_IParameter_unReg __cb)
    {
        return begin_unReg(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_unReg(String name, 
                                       FunctionalCallback_IParameter_unReg_Response __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_unReg(name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_unReg(String name, 
                                       FunctionalCallback_IParameter_unReg_Response __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_unReg(name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_unReg(String name, 
                                       java.util.Map<String, String> __ctx, 
                                       FunctionalCallback_IParameter_unReg_Response __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_unReg(name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_unReg(String name, 
                                       java.util.Map<String, String> __ctx, 
                                       FunctionalCallback_IParameter_unReg_Response __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_unReg(name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_unReg(String name, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        FunctionalCallback_IParameter_unReg_Response __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements _Callback_IParameter_unReg
        {
            public CB(FunctionalCallback_IParameter_unReg_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(int count, boolean successful)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(count, successful);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                IParameterPrxHelper.__unReg_completed(this, __result);
            }

            private final FunctionalCallback_IParameter_unReg_Response __responseCb;
        }
        return begin_unReg(name, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_unReg(String name, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unReg_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__unReg_name, __cb);
        try
        {
            __result.prepare(__unReg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_unReg(Ice.IntHolder count, Ice.BooleanHolder successful, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __unReg_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            count.value = __is.readInt();
            successful.value = __is.readBool();
            __result.endReadParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __unReg_completed(_Callback_IParameter_unReg __cb, Ice.AsyncResult __result)
    {
        org.zigui.ice.example.IParameterPrx __proxy = (org.zigui.ice.example.IParameterPrx)__result.getProxy();
        Ice.IntHolder count = new Ice.IntHolder();
        Ice.BooleanHolder successful = new Ice.BooleanHolder();
        try
        {
            __proxy.end_unReg(count, successful, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(count.value, successful.value);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IParameterPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), IParameterPrx.class, IParameterPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IParameterPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), IParameterPrx.class, IParameterPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IParameterPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), IParameterPrx.class, IParameterPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IParameterPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), IParameterPrx.class, IParameterPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static IParameterPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, IParameterPrx.class, IParameterPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static IParameterPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, IParameterPrx.class, IParameterPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::example::IParameter"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, IParameterPrx v)
    {
        __os.writeProxy(v);
    }

    public static IParameterPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            IParameterPrxHelper result = new IParameterPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
